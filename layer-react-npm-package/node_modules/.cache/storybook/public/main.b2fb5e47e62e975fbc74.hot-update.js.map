{"version":3,"file":"main.b2fb5e47e62e975fbc74.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAcsources":["webpack://duckdevatgit-layer/./src/react-components/AiAssistant/AiAssistant.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport Text from \"../Text/Text\";\r\nimport Button from \"../Button/Button\";\r\nimport ListItem, { ListItemProps } from \"./ListItem/ListItem\";\r\nimport ItemDetail from \"./ItemDetail/ItemDetail\";\r\nimport CrossIcon from \"../../assets/icons/crossIcon\";\r\nimport ArrowRightIcon from \"../../assets/icons/arrowRightIcon\";\r\nimport \"./AiAssistant.scss\";\r\nimport EnvironmentError from \"../EnvironmentError\";\r\nimport { MyDataListEngine } from \"../DataListEngine\";\r\nimport { useSpring, animated, useTransition } from \"@react-spring/web\";\r\n\r\nexport type AiAssistantProps = {\r\n  itemList: ItemData[];\r\n  color: string;\r\n  image: string;\r\n};\r\n\r\nexport type ItemData = {\r\n  title: string;\r\n  subtitle: string;\r\n  payload: string;\r\n};\r\n\r\nconst AiAssistant = ({ itemList, color, image }: AiAssistantProps) => {\r\n  const engine = new MyDataListEngine();\r\n\r\n  if (!engine.validateKeys()) {\r\n    return <EnvironmentError color=\"#FF0000\" />;\r\n  }\r\n\r\n  const [showPopUp, setShowPopUp] = useState(false);\r\n  const [showDetails, setShowDetails] = useState(false);\r\n  const [showEnvError, setShowEnvError] = useState(false);\r\n  const [itemDataList, setItemDataList] = useState<ItemData[]>([]);\r\n  const [selectedItem, setSelectedItem] = useState<number>(0);\r\n\r\n  const ref = useRef<any>();\r\n  const refPopUp = useRef<HTMLDivElement>(null);\r\n  const refBackButton = useRef<HTMLButtonElement>(null);\r\n\r\n  const prefacePrompt = `Justify the policy action in this json data using the other data in the obejct and respond very concisely and use numbers: \\n\\n`;\r\n\r\n  // Create a useEffect hook that fills itemDataList wiht ItemData objects from the itemList\r\n  useEffect(() => {\r\n    const tempItemDataList: ItemData[] = [];\r\n    itemList.forEach((item) => {\r\n      tempItemDataList.push({\r\n        title: item.title,\r\n        subtitle: item.subtitle,\r\n        payload: prefacePrompt + item.payload,\r\n      });\r\n    });\r\n    setItemDataList(tempItemDataList);\r\n  }, [itemList]);\r\n\r\n  const onClickList = async (title: string) => {\r\n    try {\r\n      const res = await engine.generateText(title);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n\r\n    setShowDetails(true);\r\n  };\r\n\r\n  const onClickPopupButton = () => {\r\n    setShowDiv(!showDiv);\r\n    setShowDetails(false);\r\n    if (showPopUp) {\r\n      if (refPopUp.current) {\r\n        refPopUp.current.className = \"main-popup-container-animate-end\";\r\n        const timer = setTimeout(() => {\r\n          setShowPopUp(false);\r\n        }, 250);\r\n        return () => clearTimeout(timer);\r\n      }\r\n    } else {\r\n      setShowPopUp(true);\r\n    }\r\n  };\r\n\r\n  const onClickBackButton = () => {\r\n    if (showDetails) {\r\n      if (refBackButton.current) {\r\n        refBackButton.current.className =\r\n          \"ai-assistant-main-popup-header-back-button-style-end\";\r\n        ref.current.log();\r\n        const timer = setTimeout(() => {\r\n          setShowDetails(false);\r\n        }, 250);\r\n        return () => clearTimeout(timer);\r\n      }\r\n    } else {\r\n      setShowDetails(true);\r\n    }\r\n  };\r\n\r\n  const [showDiv, setShowDiv] = useState(false);\r\n\r\n  const springProps = useSpring({\r\n    height: showDiv ? \"427px\" : \"0\",\r\n    opacity: showDiv ? 1 : 0,\r\n    overflow: \"hidden\",\r\n    config: { tension: 110, friction: 80 },\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <div className=\"ai-assistant-main-container\">\r\n        <Button\r\n          style={{ backgroundColor: color }}\r\n          className=\"main-popup-button\"\r\n          onClick={() => onClickPopupButton()}\r\n          child={\r\n            showPopUp ? (\r\n              <CrossIcon color=\"#ffffff\" />\r\n            ) : (\r\n              <img src={image} alt=\"img\" width=\"32px\" height=\"32px\" />\r\n            )\r\n          }\r\n        />\r\n        {showPopUp && (\r\n          <animated.div\r\n            style={springProps}\r\n            ref={refPopUp}\r\n            id=\"tunnel\"\r\n            className=\"main-popup-container-animate-start\"\r\n          >\r\n            {showEnvError && <EnvironmentError color={color} />}\r\n            <div\r\n              className=\"popup-header-container\"\r\n              style={{ borderBottomColor: color }}\r\n            >\r\n              {showDetails && (\r\n                <button\r\n                  ref={refBackButton}\r\n                  onClick={() => onClickBackButton()}\r\n                  className=\"header-back-button-style\"\r\n                >\r\n                  <ArrowRightIcon color={color} />\r\n                </button>\r\n              )}\r\n              <div className=\"header-text-container\">\r\n                <Text className=\"header-text-style\" label=\"Bops Insight\" />\r\n              </div>\r\n            </div>\r\n            <div className=\"main-item-list-container\">\r\n              {showDetails ? (\r\n                <ItemDetail\r\n                  id=\"detailif\"\r\n                  ref={ref}\r\n                  color={color}\r\n                  itemData={itemDataList[selectedItem]}\r\n                />\r\n              ) : (\r\n                itemList.map((item, index) => (\r\n                  <ListItem\r\n                    item={item}\r\n                    key={index}\r\n                    onClickList={() => {\r\n                      onClickList(item.title);\r\n                      setSelectedItem(index);\r\n                    }}\r\n                    color={color}\r\n                  />\r\n                ))\r\n              )}\r\n            </div>\r\n          </animated.div>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AiAssistant;\r\n"],"names":[],"sourceRoot":""}